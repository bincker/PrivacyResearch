android.accessibilityservice.AccessibilityService.clearWallpaper()
android.accessibilityservice.AccessibilityService.removeStickyBroadcast(android.content.Intent)
android.accessibilityservice.AccessibilityService.sendStickyBroadcast(android.content.Intent)
android.accessibilityservice.AccessibilityService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.accessibilityservice.AccessibilityService.setWallpaper(android.graphics.Bitmap)
android.accessibilityservice.AccessibilityService.setWallpaper(java.io.InputStream)
android.accounts.AbstractAccountAuthenticator.checkBinderPermission()
android.accounts.AbstractAccountAuthenticator.confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)
android.accounts.AbstractAccountAuthenticator.editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)
android.accounts.AbstractAccountAuthenticator.getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)
android.accounts.AbstractAccountAuthenticator.getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.AbstractAccountAuthenticator.getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)
android.accounts.AbstractAccountAuthenticator.hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,[java.lang.String)
android.accounts.AbstractAccountAuthenticator.updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.AbstractAccountAuthenticator$Transport.addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,[java.lang.String,android.os.Bundle)
android.accounts.AbstractAccountAuthenticator$Transport.confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)
android.accounts.AbstractAccountAuthenticator$Transport.editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)
android.accounts.AbstractAccountAuthenticator$Transport.getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)
android.accounts.AbstractAccountAuthenticator$Transport.getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.AbstractAccountAuthenticator$Transport.getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)
android.accounts.AbstractAccountAuthenticator$Transport.hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,[java.lang.String)
android.accounts.AbstractAccountAuthenticator$Transport.updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.AbstractAccountAuthenticator.addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,[java.lang.String,android.os.Bundle)
android.accounts.AccountAuthenticatorActivity.clearWallpaper()
android.accounts.AccountAuthenticatorActivity.removeStickyBroadcast(android.content.Intent)
android.accounts.AccountAuthenticatorActivity.sendStickyBroadcast(android.content.Intent)
android.accounts.AccountAuthenticatorActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.accounts.AccountAuthenticatorActivity.setPersistent(Z)
android.accounts.AccountAuthenticatorActivity.setWallpaper(android.graphics.Bitmap)
android.accounts.AccountAuthenticatorActivity.setWallpaper(java.io.InputStream)
android.accounts.AccountManager.addAccount(java.lang.String,java.lang.String,[java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager.addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.AccountManager.addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,Z)
android.accounts.AccountManager.blockingGetAuthToken(android.accounts.Account,java.lang.String,Z)
android.accounts.AccountManager.clearPassword(android.accounts.Account)
android.accounts.AccountManager.confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager.editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager.getAccounts()
android.accounts.AccountManager.getAccountsByType(java.lang.String)
android.accounts.AccountManager.getAccountsByTypeAndFeatures(java.lang.String,[java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager.getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager.getAuthToken(android.accounts.Account,java.lang.String,Z,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager.getAuthTokenByFeatures(java.lang.String,java.lang.String,[java.lang.String,android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager.getPassword(android.accounts.Account)
android.accounts.AccountManager.getUserData(android.accounts.Account,java.lang.String)
android.accounts.AccountManager.hasFeatures(android.accounts.Account,[java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager.invalidateAuthToken(java.lang.String,java.lang.String)
android.accounts.AccountManager.peekAuthToken(android.accounts.Account,java.lang.String)
android.accounts.AccountManager.removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager.setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)
android.accounts.AccountManager.setPassword(android.accounts.Account,java.lang.String)
android.accounts.AccountManager.setUserData(android.accounts.Account,java.lang.String,java.lang.String)
android.accounts.AccountManager.updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManager$AmsTask.doWork()
android.accounts.AccountManager$AmsTask.start()
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.doWork()
android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask.start()
android.accounts.AccountManagerService.addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.AccountManagerService.addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,[java.lang.String,Z,android.os.Bundle)
android.accounts.AccountManagerService.checkAuthenticateAccountsPermission(android.accounts.Account)
android.accounts.AccountManagerService.checkManageAccountsOrUseCredentialsPermissions()
android.accounts.AccountManagerService.checkManageAccountsPermission()
android.accounts.AccountManagerService.checkReadAccountsPermission()
android.accounts.AccountManagerService.clearPassword(android.accounts.Account)
android.accounts.AccountManagerService.confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,Z)
android.accounts.AccountManagerService.editProperties(android.accounts.IAccountManagerResponse,java.lang.String,Z)
android.accounts.AccountManagerService.getAccounts(java.lang.String)
android.accounts.AccountManagerService.getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,[java.lang.String)
android.accounts.AccountManagerService.getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,Z,boolean,android.os.Bundle)
android.accounts.AccountManagerService.getPassword(android.accounts.Account)
android.accounts.AccountManagerService.getUserData(android.accounts.Account,java.lang.String)
android.accounts.AccountManagerService.hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,[java.lang.String)
android.accounts.AccountManagerService.invalidateAuthToken(java.lang.String,java.lang.String)
android.accounts.AccountManagerService.peekAuthToken(android.accounts.Account,java.lang.String)
android.accounts.AccountManagerService.removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)
android.accounts.AccountManagerService.setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)
android.accounts.AccountManagerService.setPassword(android.accounts.Account,java.lang.String)
android.accounts.AccountManagerService.setUserData(android.accounts.Account,java.lang.String,java.lang.String)
android.accounts.AccountManagerService.updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,Z,android.os.Bundle)
android.accounts.AccountManagerService$SimWatcher.onReceive(android.content.Context,android.content.Intent)
android.accounts.GrantCredentialsPermissionActivity.clearWallpaper()
android.accounts.GrantCredentialsPermissionActivity.removeStickyBroadcast(android.content.Intent)
android.accounts.GrantCredentialsPermissionActivity.sendStickyBroadcast(android.content.Intent)
android.accounts.GrantCredentialsPermissionActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.accounts.GrantCredentialsPermissionActivity.setPersistent(Z)
android.accounts.GrantCredentialsPermissionActivity.setWallpaper(android.graphics.Bitmap)
android.accounts.GrantCredentialsPermissionActivity.setWallpaper(java.io.InputStream)
android.accounts.IAccountAuthenticator$Stub$Proxy.addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,[java.lang.String,android.os.Bundle)
android.accounts.IAccountAuthenticator$Stub$Proxy.confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)
android.accounts.IAccountAuthenticator$Stub$Proxy.editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)
android.accounts.IAccountAuthenticator$Stub$Proxy.getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)
android.accounts.IAccountAuthenticator$Stub$Proxy.getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.IAccountAuthenticator$Stub$Proxy.getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)
android.accounts.IAccountAuthenticator$Stub$Proxy.hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,[java.lang.String)
android.accounts.IAccountAuthenticator$Stub$Proxy.updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.IAccountManager$Stub$Proxy.addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.IAccountManager$Stub$Proxy.addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,[java.lang.String,Z,android.os.Bundle)
android.accounts.IAccountManager$Stub$Proxy.clearPassword(android.accounts.Account)
android.accounts.IAccountManager$Stub$Proxy.confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,Z)
android.accounts.IAccountManager$Stub$Proxy.editProperties(android.accounts.IAccountManagerResponse,java.lang.String,Z)
android.accounts.IAccountManager$Stub$Proxy.getAccounts(java.lang.String)
android.accounts.IAccountManager$Stub$Proxy.getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,[java.lang.String)
android.accounts.IAccountManager$Stub$Proxy.getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,Z,boolean,android.os.Bundle)
android.accounts.IAccountManager$Stub$Proxy.getPassword(android.accounts.Account)
android.accounts.IAccountManager$Stub$Proxy.getUserData(android.accounts.Account,java.lang.String)
android.accounts.IAccountManager$Stub$Proxy.hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,[java.lang.String)
android.accounts.IAccountManager$Stub$Proxy.invalidateAuthToken(java.lang.String,java.lang.String)
android.accounts.IAccountManager$Stub$Proxy.peekAuthToken(android.accounts.Account,java.lang.String)
android.accounts.IAccountManager$Stub$Proxy.removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)
android.accounts.IAccountManager$Stub$Proxy.setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)
android.accounts.IAccountManager$Stub$Proxy.setPassword(android.accounts.Account,java.lang.String)
android.accounts.IAccountManager$Stub$Proxy.setUserData(android.accounts.Account,java.lang.String,java.lang.String)
android.accounts.IAccountManager$Stub$Proxy.updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,Z,android.os.Bundle)
android.app.Activity.clearWallpaper()
android.app.Activity.removeStickyBroadcast(android.content.Intent)
android.app.Activity.sendBroadcast(android.content.Intent)
android.app.Activity.sendOrderedBroadcast(android.content.Intent,java.lang.String)
android.app.Activity.sendStickyBroadcast(android.content.Intent)
android.app.Activity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.Activity.setContentView(I)
android.app.Activity.setPersistent(Z)
android.app.Activity.setWallpaper(android.graphics.Bitmap)
android.app.Activity.setWallpaper(java.io.InputStream)
android.app.Activity.startActivity(android.content.Intent)
android.app.Activity.startActivityForResult(android.content.Intent,I)
android.app.Activity.startActivityFromChild(android.app.Activity,android.content.Intent,I)
android.app.Activity.startActivityIfNeeded(android.content.Intent,I)
android.app.ActivityGroup.clearWallpaper()
android.app.ActivityGroup.removeStickyBroadcast(android.content.Intent)
android.app.ActivityGroup.sendStickyBroadcast(android.content.Intent)
android.app.ActivityGroup.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.ActivityGroup.setPersistent(Z)
android.app.ActivityGroup.setWallpaper(android.graphics.Bitmap)
android.app.ActivityGroup.setWallpaper(java.io.InputStream)
android.app.ActivityManager.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)
android.app.ActivityManager.forceStopPackage(java.lang.String)
android.app.ActivityManager.getRecentTasks(I,I)
android.app.ActivityManager.getRunningTasks(I)
android.app.ActivityManager.killBackgroundProcesses(java.lang.String)
android.app.ActivityManager.restartPackage(java.lang.String)
android.app.ActivityManagerNative.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)
android.app.ActivityManagerNative.forceStopPackage(java.lang.String)
android.app.ActivityManagerNative.getRecentTasks(I,I)
android.app.ActivityManagerNative.getRunningTasks(I)
android.app.ActivityManagerNative.killBackgroundProcesses(java.lang.String)
android.app.ActivityManagerNative.restartPackage(java.lang.String)
android.app.admin.DevicePolicyManager.getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)
android.app.admin.DevicePolicyManager.reportFailedPasswordAttempt()
android.app.admin.DevicePolicyManager.reportSuccessfulPasswordAttempt()
android.app.admin.DevicePolicyManager.setActiveAdmin(android.content.ComponentName)
android.app.admin.DevicePolicyManager.setActivePasswordState(I,I)
android.app.admin.IDevicePolicyManager$Stub$Proxy.getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)
android.app.admin.IDevicePolicyManager$Stub$Proxy.reportFailedPasswordAttempt()
android.app.admin.IDevicePolicyManager$Stub$Proxy.reportSuccessfulPasswordAttempt()
android.app.admin.IDevicePolicyManager$Stub$Proxy.setActiveAdmin(android.content.ComponentName)
android.app.admin.IDevicePolicyManager$Stub$Proxy.setActivePasswordState(I,I)
android.app.AlarmManager.setTime(J)
android.app.AlarmManager.setTimeZone(java.lang.String)
android.app.AliasActivity.clearWallpaper()
android.app.AliasActivity.removeStickyBroadcast(android.content.Intent)
android.app.AliasActivity.sendStickyBroadcast(android.content.Intent)
android.app.AliasActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.AliasActivity.setPersistent(Z)
android.app.AliasActivity.setWallpaper(android.graphics.Bitmap)
android.app.AliasActivity.setWallpaper(java.io.InputStream)
android.app.Application.clearWallpaper()
android.app.Application.removeStickyBroadcast(android.content.Intent)
android.app.Application.sendStickyBroadcast(android.content.Intent)
android.app.Application.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.Application.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.Application.setWallpaper(android.graphics.Bitmap)
android.app.Application.setWallpaper(java.io.InputStream)
android.app.backup.BackupAgent.clearWallpaper()
android.app.backup.BackupAgent.removeStickyBroadcast(android.content.Intent)
android.app.backup.BackupAgent.sendStickyBroadcast(android.content.Intent)
android.app.backup.BackupAgent.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.backup.BackupAgent.setWallpaper(android.graphics.Bitmap)
android.app.backup.BackupAgent.setWallpaper(java.io.InputStream)
android.app.backup.BackupAgentHelper.clearWallpaper()
android.app.backup.BackupAgentHelper.removeStickyBroadcast(android.content.Intent)
android.app.backup.BackupAgentHelper.sendStickyBroadcast(android.content.Intent)
android.app.backup.BackupAgentHelper.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.backup.BackupAgentHelper.setWallpaper(android.graphics.Bitmap)
android.app.backup.BackupAgentHelper.setWallpaper(java.io.InputStream)
android.app.backup.BackupManager.beginRestoreSession()
android.app.backup.BackupManager.dataChanged(java.lang.String)
android.app.backup.BackupManager.requestRestore(android.app.backup.RestoreObserver)
android.app.backup.IBackupManager$Stub$Proxy.backupNow()
android.app.backup.IBackupManager$Stub$Proxy.beginRestoreSession(java.lang.String)
android.app.backup.IBackupManager$Stub$Proxy.clearBackupData(java.lang.String)
android.app.backup.IBackupManager$Stub$Proxy.dataChanged(java.lang.String)
android.app.backup.IBackupManager$Stub$Proxy.getCurrentTransport()
android.app.backup.IBackupManager$Stub$Proxy.isBackupEnabled()
android.app.backup.IBackupManager$Stub$Proxy.listAllTransports()
android.app.backup.IBackupManager$Stub$Proxy.selectBackupTransport(java.lang.String)
android.app.backup.IBackupManager$Stub$Proxy.setAutoRestore(Z)
android.app.backup.IBackupManager$Stub$Proxy.setBackupEnabled(Z)
android.app.ContextImpl.clearWallpaper()
android.app.ContextImpl.removeStickyBroadcast(android.content.Intent)
android.app.ContextImpl.sendStickyBroadcast(android.content.Intent)
android.app.ContextImpl.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.ContextImpl.setWallpaper(android.graphics.Bitmap)
android.app.ContextImpl.setWallpaper(java.io.InputStream)
android.app.ContextImpl$ApplicationContentResolver.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,J)
android.app.ContextImpl$ApplicationContentResolver.getCurrentSync()
android.app.ContextImpl$ApplicationContentResolver.getIsSyncable(android.accounts.Account,java.lang.String)
android.app.ContextImpl$ApplicationContentResolver.getMasterSyncAutomatically()
android.app.ContextImpl$ApplicationContentResolver.getPeriodicSyncs(android.accounts.Account,java.lang.String)
android.app.ContextImpl$ApplicationContentResolver.getSyncAutomatically(android.accounts.Account,java.lang.String)
android.app.ContextImpl$ApplicationContentResolver.getSyncStatus(android.accounts.Account,java.lang.String)
android.app.ContextImpl$ApplicationContentResolver.isSyncActive(android.accounts.Account,java.lang.String)
android.app.ContextImpl$ApplicationContentResolver.isSyncPending(android.accounts.Account,java.lang.String)
android.app.ContextImpl$ApplicationContentResolver.openFileDescriptor(android.net.Uri,java.lang.String)
android.app.ContextImpl$ApplicationContentResolver.openInputStream(android.net.Uri)
android.app.ContextImpl$ApplicationContentResolver.openOutputStream(android.net.Uri)
android.app.ContextImpl$ApplicationContentResolver.query(android.net.Uri,[java.lang.String,java.lang.String,[java.lang.String,java.lang.String)
android.app.ContextImpl$ApplicationContentResolver.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)
android.app.ContextImpl$ApplicationContentResolver.setIsSyncable(android.accounts.Account,java.lang.String,I)
android.app.ContextImpl$ApplicationContentResolver.setMasterSyncAutomatically(Z)
android.app.ContextImpl$ApplicationContentResolver.setSyncAutomatically(android.accounts.Account,java.lang.String,Z)
android.app.ContextImpl$ApplicationPackageManager.addPreferredActivity(IntentFilter,I,ComponentName[],ComponentName)
android.app.ContextImpl$ApplicationPackageManager.clearApplicationUserData(String,IPackageDataObserver)
android.app.ContextImpl$ApplicationPackageManager.clearPackagePreferredActivities(String)
android.app.ContextImpl$ApplicationPackageManager.deleteApplicationCacheFiles(String,IPackageDataObserver)
android.app.ContextImpl$ApplicationPackageManager.deletePackage(String,IPackageDeleteObserver,I)
android.app.ContextImpl$ApplicationPackageManager.freeStorage(J,IntentSender)
android.app.ContextImpl$ApplicationPackageManager.freeStorageAndNotify(J,IPackageDataObserver)
android.app.ContextImpl$ApplicationPackageManager.getPackageSizeInfo(String,IPackageStatsObserver)
android.app.ContextImpl$ApplicationPackageManager.installPackage(Uri,IPackageInstallObserver,I,String)
android.app.ContextImpl$ApplicationPackageManager.movePackage(String,IPackageMoveObserver,I)
android.app.ContextImpl$ApplicationPackageManager.replacePreferredActivity(IntentFilter,I,ComponentName[],ComponentName)
android.app.ContextImpl$ApplicationPackageManager.setApplicationEnabledSetting(String,I,I)
android.app.ContextImpl$ApplicationPackageManager.setComponentEnabledSetting(ComponentName,I,I)
android.app.ExpandableListActivity.clearWallpaper()
android.app.ExpandableListActivity.removeStickyBroadcast(android.content.Intent)
android.app.ExpandableListActivity.sendStickyBroadcast(android.content.Intent)
android.app.ExpandableListActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.ExpandableListActivity.setPersistent(Z)
android.app.ExpandableListActivity.setWallpaper(android.graphics.Bitmap)
android.app.ExpandableListActivity.setWallpaper(java.io.InputStream)
android.app.FullBackupAgent.clearWallpaper()
android.app.FullBackupAgent.removeStickyBroadcast(android.content.Intent)
android.app.FullBackupAgent.sendStickyBroadcast(android.content.Intent)
android.app.FullBackupAgent.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.FullBackupAgent.setWallpaper(android.graphics.Bitmap)
android.app.FullBackupAgent.setWallpaper(java.io.InputStream)
android.app.IActivityManager$Stub$Proxy.bindBackupAgent(android.content.pm.ApplicationInfo,I)
android.app.IActivityManager$Stub$Proxy.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)
android.app.IActivityManager$Stub$Proxy.forceStopPackage(java.lang.String)
android.app.IActivityManager$Stub$Proxy.getRecentTasks(I,I)
android.app.IActivityManager$Stub$Proxy.getTasks(I,I,android.app.IThumbnailReceiver)
android.app.IActivityManager$Stub$Proxy.killBackgroundProcesses(java.lang.String)
android.app.IActivityManager$Stub$Proxy.moveTaskBackwards(I)
android.app.IActivityManager$Stub$Proxy.moveTaskToBack(I)
android.app.IActivityManager$Stub$Proxy.moveTaskToFront(I)
android.app.IActivityManager$Stub$Proxy.profileControl(java.lang.String,Z,java.lang.String,android.os.ParcelFileDescriptor)
android.app.IActivityManager$Stub$Proxy.resumeAppSwitches()
android.app.IActivityManager$Stub$Proxy.setActivityController(android.app.IActivityController)
android.app.IActivityManager$Stub$Proxy.setAlwaysFinish(Z)
android.app.IActivityManager$Stub$Proxy.setDebugApp(java.lang.String,Z,Z)
android.app.IActivityManager$Stub$Proxy.setPersistent(android.os.IBinder,Z)
android.app.IActivityManager$Stub$Proxy.setProcessForeground(android.os.IBinder,I,Z)
android.app.IActivityManager$Stub$Proxy.setProcessLimit(I)
android.app.IActivityManager$Stub$Proxy.shutdown(I)
android.app.IActivityManager$Stub$Proxy.signalPersistentProcesses(I)
android.app.IActivityManager$Stub$Proxy.stopAppSwitches()
android.app.IActivityManager$Stub$Proxy.unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)
android.app.IActivityManager$Stub$Proxy.unhandledBack(I)
android.app.IActivityManager$Stub$Proxy.updateConfiguration(android.content.res.Configuration)
android.app.IAlarmManager$Stub$Proxy.setTime(J)
android.app.IAlarmManager$Stub$Proxy.setTimeZone(java.lang.String)
android.app.Instrumentation.invokeContextMenuAction(android.app.Activity,I,I)
android.app.Instrumentation.sendCharacterSync(I)
android.app.Instrumentation.sendKeyDownUpSync(I)
android.app.Instrumentation.sendKeySync(android.view.KeyEvent)
android.app.Instrumentation.sendPointerSync(android.view.MotionEvent)
android.app.Instrumentation.sendStringSync(java.lang.String)
android.app.Instrumentation.sendTrackballEventSync(android.view.MotionEvent)
android.app.IntentService.clearWallpaper()
android.app.IntentService.removeStickyBroadcast(android.content.Intent)
android.app.IntentService.sendStickyBroadcast(android.content.Intent)
android.app.IntentService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.IntentService.setWallpaper(android.graphics.Bitmap)
android.app.IntentService.setWallpaper(java.io.InputStream)
android.app.IStatusBar$Stub$Proxy.activate()
android.app.IStatusBar$Stub$Proxy.addIcon(java.lang.String,java.lang.String,I,I)
android.app.IStatusBar$Stub$Proxy.deactivate()
android.app.IStatusBar$Stub$Proxy.disable(I,android.os.IBinder,java.lang.String)
android.app.IStatusBar$Stub$Proxy.removeIcon(android.os.IBinder)
android.app.IStatusBar$Stub$Proxy.toggle()
android.app.IStatusBar$Stub$Proxy.updateIcon(android.os.IBinder,java.lang.String,java.lang.String,I,I)
android.app.IWallpaperManager$Stub$Proxy.setDimensionHints(I,I)
android.app.IWallpaperManager$Stub$Proxy.setWallpaper(java.lang.String)
android.app.IWallpaperManager$Stub$Proxy.setWallpaperComponent(android.content.ComponentName)
android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)
android.app.KeyguardManager$KeyguardLock.disableKeyguard()
android.app.KeyguardManager$KeyguardLock.reenableKeyguard()
android.app.ListActivity.clearWallpaper()
android.app.ListActivity.removeStickyBroadcast(android.content.Intent)
android.app.ListActivity.sendStickyBroadcast(android.content.Intent)
android.app.ListActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.ListActivity.setPersistent(Z)
android.app.ListActivity.setWallpaper(android.graphics.Bitmap)
android.app.ListActivity.setWallpaper(java.io.InputStream)
android.app.NotificationManager.notify(I,android.app.Notification)
android.app.NotificationManager.notify(java.lang.String,I,android.app.Notification)
android.app.Service.clearWallpaper()
android.app.Service.removeStickyBroadcast(android.content.Intent)
android.app.Service.sendBroadcast(android.content.Intent)
android.app.Service.sendOrderedBroadcast(android.content.Intent,java.lang.String)
android.app.Service.sendStickyBroadcast(android.content.Intent)
android.app.Service.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.Service.setWallpaper(android.graphics.Bitmap)
android.app.Service.setWallpaper(java.io.InputStream)
android.app.Service.startActivity(android.content.Intent)
android.app.Service.startService(android.content.Intent)
android.app.StatusBarManager.addIcon(java.lang.String,I,I)
android.app.StatusBarManager.collapse()
android.app.StatusBarManager.disable(I)
android.app.StatusBarManager.expand()
android.app.StatusBarManager.removeIcon(android.os.IBinder)
android.app.StatusBarManager.toggle()
android.app.StatusBarManager.updateIcon(android.os.IBinder,java.lang.String,I,I)
android.app.TabActivity.clearWallpaper()
android.app.TabActivity.removeStickyBroadcast(android.content.Intent)
android.app.TabActivity.sendStickyBroadcast(android.content.Intent)
android.app.TabActivity.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.app.TabActivity.setPersistent(Z)
android.app.TabActivity.setWallpaper(android.graphics.Bitmap)
android.app.TabActivity.setWallpaper(java.io.InputStream)
android.app.WallpaperManager.clear()
android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)
android.app.WallpaperManager.setResource(I)
android.app.WallpaperManager.setStream(java.io.InputStream)
android.app.WallpaperManager.suggestDesiredDimensions(I,I)
android.appwidget.AppWidgetManager.bindAppWidgetId(I,android.content.ComponentName)
android.bluetooth.BluetoothA2dp.connectSink(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothA2dp.disconnectSink(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothA2dp.getConnectedSinks()
android.bluetooth.BluetoothA2dp.getNonDisconnectedSinks()
android.bluetooth.BluetoothA2dp.getSinkPriority(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothA2dp.getSinkState(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothA2dp.isSinkConnected(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothA2dp.resumeSink(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothA2dp.setSinkPriority(android.bluetooth.BluetoothDevice,I)
android.bluetooth.BluetoothA2dp.suspendSink(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothAdapter.cancelDiscovery()
android.bluetooth.BluetoothAdapter.disable()
android.bluetooth.BluetoothAdapter.enable()
android.bluetooth.BluetoothAdapter.getAddress()
android.bluetooth.BluetoothAdapter.getBondedDevices()
android.bluetooth.BluetoothAdapter.getDiscoverableTimeout()
android.bluetooth.BluetoothAdapter.getName()
android.bluetooth.BluetoothAdapter.getScanMode()
android.bluetooth.BluetoothAdapter.getState()
android.bluetooth.BluetoothAdapter.isDiscovering()
android.bluetooth.BluetoothAdapter.isEnabled()
android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)
android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(I)
android.bluetooth.BluetoothAdapter.setName(java.lang.String)
android.bluetooth.BluetoothAdapter.setScanMode(I,I)
android.bluetooth.BluetoothAdapter.setScanMode(I)
android.bluetooth.BluetoothAdapter.startDiscovery()
android.bluetooth.BluetoothDevice.cancelBondProcess()
android.bluetooth.BluetoothDevice.cancelPairingUserInput()
android.bluetooth.BluetoothDevice.createBond()
android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)
android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()
android.bluetooth.BluetoothDevice.getBondState()
android.bluetooth.BluetoothDevice.getName()
android.bluetooth.BluetoothDevice.getServiceChannel(android.os.ParcelUuid)
android.bluetooth.BluetoothDevice.getUuids()
android.bluetooth.BluetoothDevice.removeBond()
android.bluetooth.BluetoothDevice.setPairingConfirmation(Z)
android.bluetooth.BluetoothDevice.setPasskey(I)
android.bluetooth.BluetoothDevice.setPin([B)
android.bluetooth.BluetoothHeadset.connectHeadset(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothHeadset.disconnectHeadset()
android.bluetooth.BluetoothHeadset.getBatteryUsageHint()
android.bluetooth.BluetoothHeadset.getCurrentHeadset()
android.bluetooth.BluetoothHeadset.getPriority(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothHeadset.getState()
android.bluetooth.BluetoothHeadset.isConnected(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothHeadset.setPriority(android.bluetooth.BluetoothDevice,I)
android.bluetooth.BluetoothHeadset.startVoiceRecognition()
android.bluetooth.BluetoothHeadset.stopVoiceRecognition()
android.bluetooth.BluetoothPbap.disconnect()
android.bluetooth.BluetoothPbap.getClient()
android.bluetooth.BluetoothPbap.getState()
android.bluetooth.BluetoothPbap.isConnected(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothSocket.connect()
android.bluetooth.HeadsetBase.acquireWakeLock()
android.bluetooth.HeadsetBase.finalize()
android.bluetooth.HeadsetBase.handleInput(java.lang.String)
android.bluetooth.HeadsetBase.releaseWakeLock()
android.bluetooth.IBluetooth$Stub$Proxy.addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,I,android.os.IBinder)
android.bluetooth.IBluetooth$Stub$Proxy.cancelBondProcess(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.cancelDiscovery()
android.bluetooth.IBluetooth$Stub$Proxy.cancelPairingUserInput(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.createBond(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.disable(Z)
android.bluetooth.IBluetooth$Stub$Proxy.enable()
android.bluetooth.IBluetooth$Stub$Proxy.fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)
android.bluetooth.IBluetooth$Stub$Proxy.getAddress()
android.bluetooth.IBluetooth$Stub$Proxy.getBluetoothState()
android.bluetooth.IBluetooth$Stub$Proxy.getBondState(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.getDiscoverableTimeout()
android.bluetooth.IBluetooth$Stub$Proxy.getName()
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteClass(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteName(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)
android.bluetooth.IBluetooth$Stub$Proxy.getRemoteUuids(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.getScanMode()
android.bluetooth.IBluetooth$Stub$Proxy.getTrustState(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.isDiscovering()
android.bluetooth.IBluetooth$Stub$Proxy.isEnabled()
android.bluetooth.IBluetooth$Stub$Proxy.listBonds()
android.bluetooth.IBluetooth$Stub$Proxy.removeBond(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.removeServiceRecord(I)
android.bluetooth.IBluetooth$Stub$Proxy.setDiscoverableTimeout(I)
android.bluetooth.IBluetooth$Stub$Proxy.setName(java.lang.String)
android.bluetooth.IBluetooth$Stub$Proxy.setPairingConfirmation(java.lang.String,Z)
android.bluetooth.IBluetooth$Stub$Proxy.setPasskey(java.lang.String,I)
android.bluetooth.IBluetooth$Stub$Proxy.setPin(java.lang.String,[B)
android.bluetooth.IBluetooth$Stub$Proxy.setScanMode(I,I)
android.bluetooth.IBluetooth$Stub$Proxy.setTrust(java.lang.String,Z)
android.bluetooth.IBluetooth$Stub$Proxy.startDiscovery()
android.bluetooth.IBluetoothA2dp$Stub$Proxy.connectSink(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnectSink(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getConnectedSinks()
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getNonDisconnectedSinks()
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getSinkPriority(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothA2dp$Stub$Proxy.getSinkState(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothA2dp$Stub$Proxy.resumeSink(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothA2dp$Stub$Proxy.setSinkPriority(android.bluetooth.BluetoothDevice,I)
android.bluetooth.IBluetoothA2dp$Stub$Proxy.suspendSink(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothHeadset$Stub$Proxy.connectHeadset(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnectHeadset()
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getBatteryUsageHint()
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getCurrentHeadset()
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getPriority(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothHeadset$Stub$Proxy.getState()
android.bluetooth.IBluetoothHeadset$Stub$Proxy.isConnected(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothHeadset$Stub$Proxy.setPriority(android.bluetooth.BluetoothDevice,I)
android.bluetooth.IBluetoothHeadset$Stub$Proxy.startVoiceRecognition()
android.bluetooth.IBluetoothHeadset$Stub$Proxy.stopVoiceRecognition()
android.bluetooth.IBluetoothPbap$Stub$Proxy.connect(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetoothPbap$Stub$Proxy.disconnect()
android.bluetooth.IBluetoothPbap$Stub$Proxy.getClient()
android.bluetooth.IBluetoothPbap$Stub$Proxy.getState()
android.bluetooth.IBluetoothPbap$Stub$Proxy.isConnected(android.bluetooth.BluetoothDevice)
android.bluetooth.ScoSocket.acquireWakeLock()
android.bluetooth.ScoSocket.close()
android.bluetooth.ScoSocket.finalize()
android.bluetooth.ScoSocket.releaseWakeLock()
android.bluetooth.ScoSocket.releaseWakeLockNow()
android.content.ContentResolver.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,J)
android.content.ContentResolver.getCurrentSync()
android.content.ContentResolver.getIsSyncable(android.accounts.Account,java.lang.String)
android.content.ContentResolver.getMasterSyncAutomatically()
android.content.ContentResolver.getPeriodicSyncs(android.accounts.Account,java.lang.String)
android.content.ContentResolver.getSyncAutomatically(android.accounts.Account,java.lang.String)
android.content.ContentResolver.getSyncStatus(android.accounts.Account,java.lang.String)
android.content.ContentResolver.isSyncActive(android.accounts.Account,java.lang.String)
android.content.ContentResolver.isSyncPending(android.accounts.Account,java.lang.String)
android.content.ContentResolver.openFileDescriptor(android.net.Uri,java.lang.String)
android.content.ContentResolver.openInputStream(android.net.Uri)
android.content.ContentResolver.openOutputStream(android.net.Uri)
android.content.ContentResolver.query(android.net.Uri,[java.lang.String,java.lang.String,[java.lang.String,java.lang.String)
android.content.ContentResolver.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)
android.content.ContentResolver.setIsSyncable(android.accounts.Account,java.lang.String,I)
android.content.ContentResolver.setMasterSyncAutomatically(Z)
android.content.ContentResolver.setSyncAutomatically(android.accounts.Account,java.lang.String,Z)
android.content.ContentService.<init>(android.content.Context,Z)
android.content.ContentService.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,J)
android.content.ContentService.dump(java.io.FileDescriptor,java.io.PrintWriter,[java.lang.String)
android.content.ContentService.getCurrentSync()
android.content.ContentService.getIsSyncable(android.accounts.Account,java.lang.String)
android.content.ContentService.getMasterSyncAutomatically()
android.content.ContentService.getPeriodicSyncs(android.accounts.Account,java.lang.String)
android.content.ContentService.getSyncAutomatically(android.accounts.Account,java.lang.String)
android.content.ContentService.getSyncStatus(android.accounts.Account,java.lang.String)
android.content.ContentService.isSyncActive(android.accounts.Account,java.lang.String)
android.content.ContentService.isSyncPending(android.accounts.Account,java.lang.String)
android.content.ContentService.main(android.content.Context,Z)
android.content.ContentService.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)
android.content.ContentService.setIsSyncable(android.accounts.Account,java.lang.String,I)
android.content.ContentService.setMasterSyncAutomatically(Z)
android.content.ContentService.setSyncAutomatically(android.accounts.Account,java.lang.String,Z)
android.content.Context.clearWallpaper()
android.content.Context.removeStickyBroadcast(android.content.Intent)
android.content.Context.sendBroadcast(android.content.Intent)
android.content.Context.sendOrderedBroadcast(android.content.Intent,java.lang.String)
android.content.Context.sendStickyBroadcast(android.content.Intent)
android.content.Context.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.content.Context.setWallpaper(android.graphics.Bitmap)
android.content.Context.setWallpaper(java.io.InputStream)
android.content.Context.startActivity(android.content.Intent)
android.content.Context.startService(android.content.Intent)
android.content.ContextWrapper.clearWallpaper()
android.content.ContextWrapper.removeStickyBroadcast(android.content.Intent)
android.content.ContextWrapper.sendBroadcast(android.content.Intent)
android.content.ContextWrapper.sendOrderedBroadcast(android.content.Intent,java.lang.String)
android.content.ContextWrapper.sendStickyBroadcast(android.content.Intent)
android.content.ContextWrapper.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.content.ContextWrapper.setWallpaper(android.graphics.Bitmap)
android.content.ContextWrapper.setWallpaper(java.io.InputStream)
android.content.ContextWrapper.startActivity(android.content.Intent)
android.content.ContextWrapper.startService(android.content.Intent)
android.content.IContentService$Stub$Proxy.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,J)
android.content.IContentService$Stub$Proxy.getCurrentSync()
android.content.IContentService$Stub$Proxy.getIsSyncable(android.accounts.Account,java.lang.String)
android.content.IContentService$Stub$Proxy.getMasterSyncAutomatically()
android.content.IContentService$Stub$Proxy.getPeriodicSyncs(android.accounts.Account,java.lang.String)
android.content.IContentService$Stub$Proxy.getSyncAutomatically(android.accounts.Account,java.lang.String)
android.content.IContentService$Stub$Proxy.getSyncStatus(android.accounts.Account,java.lang.String)
android.content.IContentService$Stub$Proxy.isSyncActive(android.accounts.Account,java.lang.String)
android.content.IContentService$Stub$Proxy.isSyncPending(android.accounts.Account,java.lang.String)
android.content.IContentService$Stub$Proxy.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)
android.content.IContentService$Stub$Proxy.setIsSyncable(android.accounts.Account,java.lang.String,I)
android.content.IContentService$Stub$Proxy.setMasterSyncAutomatically(Z)
android.content.IContentService$Stub$Proxy.setSyncAutomatically(android.accounts.Account,java.lang.String,Z)
android.content.MutableContextWrapper.clearWallpaper()
android.content.MutableContextWrapper.removeStickyBroadcast(android.content.Intent)
android.content.MutableContextWrapper.sendStickyBroadcast(android.content.Intent)
android.content.MutableContextWrapper.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.content.MutableContextWrapper.setWallpaper(android.graphics.Bitmap)
android.content.MutableContextWrapper.setWallpaper(java.io.InputStream)
android.content.pm.IPackageManager$Stub$Proxy.addPreferredActivity(android.content.IntentFilter,I,[android.content.ComponentName,android.content.ComponentName)
android.content.pm.IPackageManager$Stub$Proxy.clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)
android.content.pm.IPackageManager$Stub$Proxy.clearPackagePreferredActivities(java.lang.String)
android.content.pm.IPackageManager$Stub$Proxy.deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)
android.content.pm.IPackageManager$Stub$Proxy.deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,I)
android.content.pm.IPackageManager$Stub$Proxy.freeStorage(J,android.content.IntentSender)
android.content.pm.IPackageManager$Stub$Proxy.freeStorageAndNotify(J,android.content.pm.IPackageDataObserver)
android.content.pm.IPackageManager$Stub$Proxy.installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,I,java.lang.String)
android.content.pm.IPackageManager$Stub$Proxy.movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,I)
android.content.pm.IPackageManager$Stub$Proxy.replacePreferredActivity(android.content.IntentFilter,I,[android.content.ComponentName,android.content.ComponentName)
android.content.pm.IPackageManager$Stub$Proxy.setApplicationEnabledSetting(java.lang.String,I,I)
android.content.pm.IPackageManager$Stub$Proxy.setComponentEnabledSetting(android.content.ComponentName,I,I)
android.content.pm.IPackageManager$Stub$Proxy.setInstallLocation(I)
android.content.pm.IPackageManager$Stub$Proxy.updateExternalMediaStatus(Z,Z)
android.content.pm.PackageManager.addPreferredActivity(android.content.IntentFilter,I,android.content.ComponentName[],android.content.ComponentName)
android.content.pm.PackageManager.clearApplicationUserData(java.lang.String,IPackageDataObserver)
android.content.pm.PackageManager.clearPackagePreferredActivities(java.lang.String)
android.content.pm.PackageManager.deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)
android.content.pm.PackageManager.deletePackage(java.lang.String,IPackageDeleteObserver,I)
android.content.pm.PackageManager.freeStorage(J,android.content.IntentSender)
android.content.pm.PackageManager.freeStorageAndNotify(J,android.content.pm.IPackageDataObserver)
android.content.pm.PackageManager.getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)
android.content.pm.PackageManager.installPackage(Uri,IPackageInstallObserver,I,java.lang.String)
android.content.pm.PackageManager.movePackage(java.lang.String,IPackageMoveObserver,I)
android.content.pm.PackageManager.replacePreferredActivity(android.content.IntentFilter,I,android.content.ComponentName[],android.content.ComponentName)
android.content.pm.PackageManager.setApplicationEnabledSetting(java.lang.String,I,I)
android.content.pm.PackageManager.setComponentEnabledSetting(android.content.ComponentName,I,I)
android.app.ContextImpl$ApplicationPackageManager.addPreferredActivity(android.content.IntentFilter,I,android.content.ComponentName[],android.content.ComponentName)
android.app.ContextImpl$ApplicationPackageManager.clearApplicationUserData(java.lang.String,IPackageDataObserver)
android.app.ContextImpl$ApplicationPackageManager.clearPackagePreferredActivities(java.lang.String)
android.app.ContextImpl$ApplicationPackageManager.deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)
android.app.ContextImpl$ApplicationPackageManager.deletePackage(java.lang.String,IPackageDeleteObserver,I)
android.app.ContextImpl$ApplicationPackageManager.freeStorage(J,android.content.IntentSender)
android.app.ContextImpl$ApplicationPackageManager.freeStorageAndNotify(J,android.content.pm.IPackageDataObserver)
android.app.ContextImpl$ApplicationPackageManager.getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)
android.app.ContextImpl$ApplicationPackageManager.installPackage(Uri,IPackageInstallObserver,I,java.lang.String)
android.app.ContextImpl$ApplicationPackageManager.movePackage(java.lang.String,IPackageMoveObserver,I)
android.app.ContextImpl$ApplicationPackageManager.replacePreferredActivity(android.content.IntentFilter,I,android.content.ComponentName[],android.content.ComponentName)
android.app.ContextImpl$ApplicationPackageManager.setApplicationEnabledSetting(java.lang.String,I,I)
android.app.ContextImpl$ApplicationPackageManager.setComponentEnabledSetting(android.content.ComponentName,I,I)
android.hardware.Camera.native_setup(java.lang.Object)
android.hardware.Camera.open()
android.inputmethodservice.AbstractInputMethodService.clearWallpaper()
android.inputmethodservice.AbstractInputMethodService.removeStickyBroadcast(android.content.Intent)
android.inputmethodservice.AbstractInputMethodService.sendStickyBroadcast(android.content.Intent)
android.inputmethodservice.AbstractInputMethodService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.inputmethodservice.AbstractInputMethodService.setWallpaper(android.graphics.Bitmap)
android.inputmethodservice.AbstractInputMethodService.setWallpaper(java.io.InputStream)
android.location.ILocationManager$Stub$Proxy.addGpsStatusListener(android.location.IGpsStatusListener)
android.location.ILocationManager$Stub$Proxy.addProximityAlert(D,D,F,J,android.app.PendingIntent)
android.location.ILocationManager$Stub$Proxy.addTestProvider(java.lang.String,Z,boolean,Z,boolean,Z,boolean,Z,I,I)
android.location.ILocationManager$Stub$Proxy.clearTestProviderEnabled(java.lang.String)
android.location.ILocationManager$Stub$Proxy.clearTestProviderLocation(java.lang.String)
android.location.ILocationManager$Stub$Proxy.clearTestProviderStatus(java.lang.String)
android.location.ILocationManager$Stub$Proxy.getLastKnownLocation(java.lang.String)
android.location.ILocationManager$Stub$Proxy.getProviderInfo(java.lang.String)
android.location.ILocationManager$Stub$Proxy.getProviders(Z)
android.location.ILocationManager$Stub$Proxy.isProviderEnabled(java.lang.String)
android.location.ILocationManager$Stub$Proxy.removeTestProvider(java.lang.String)
android.location.ILocationManager$Stub$Proxy.reportLocation(android.location.Location,Z)
android.location.ILocationManager$Stub$Proxy.requestLocationUpdates(java.lang.String,J,F,android.location.ILocationListener)
android.location.ILocationManager$Stub$Proxy.requestLocationUpdatesPI(java.lang.String,J,F,android.app.PendingIntent)
android.location.ILocationManager$Stub$Proxy.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)
android.location.ILocationManager$Stub$Proxy.setTestProviderEnabled(java.lang.String,Z)
android.location.ILocationManager$Stub$Proxy.setTestProviderLocation(java.lang.String,android.location.Location)
android.location.ILocationManager$Stub$Proxy.setTestProviderStatus(java.lang.String,I,android.os.Bundle,J)
android.location.LocationManager._requestLocationUpdates(java.lang.String,J,F,android.app.PendingIntent)
android.location.LocationManager._requestLocationUpdates(java.lang.String,J,F,android.location.LocationListener,android.os.Looper)
android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus$Listener)
android.location.LocationManager.addNmeaListener(android.location.GpsStatus$NmeaListener)
android.location.LocationManager.addProximityAlert(D,D,F,J,android.app.PendingIntent)
android.location.LocationManager.addTestProvider(java.lang.String,Z,boolean,Z,boolean,Z,boolean,Z,I,I)
android.location.LocationManager.best(java.util.List)
android.location.LocationManager.clearTestProviderEnabled(java.lang.String)
android.location.LocationManager.clearTestProviderLocation(java.lang.String)
android.location.LocationManager.clearTestProviderStatus(java.lang.String)
android.location.LocationManager.getBestProvider(android.location.Criteria,Z)
android.location.LocationManager.getLastKnownLocation(java.lang.String)
android.location.LocationManager.getProvider(java.lang.String)
android.location.LocationManager.getProviders(android.location.Criteria,Z)
android.location.LocationManager.getProviders(Z)
android.location.LocationManager.isProviderEnabled(java.lang.String)
android.location.LocationManager.removeTestProvider(java.lang.String)
android.location.LocationManager.requestLocationUpdates(java.lang.String,J,F,android.app.PendingIntent)
android.location.LocationManager.requestLocationUpdates(java.lang.String,J,F,android.location.LocationListener,android.os.Looper)
android.location.LocationManager.requestLocationUpdates(java.lang.String,J,F,android.location.LocationListener)
android.location.LocationManager.sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)
android.location.LocationManager.setTestProviderEnabled(java.lang.String,Z)
android.location.LocationManager.setTestProviderLocation(java.lang.String,android.location.Location)
android.location.LocationManager.setTestProviderStatus(java.lang.String,I,android.os.Bundle,J)
android.media.AsyncPlayer.acquireWakeLock()
android.media.AsyncPlayer.enqueueLocked(android.media.AsyncPlayer$Command)
android.media.AsyncPlayer.play(android.content.Context,android.net.Uri,Z,I)
android.media.AsyncPlayer.releaseWakeLock()
android.media.AsyncPlayer.stop()
android.media.AudioManager.isBluetoothA2dpOn()
android.media.AudioManager.isWiredHeadsetOn()
android.media.AudioManager.setBluetoothScoOn(Z)
android.media.AudioManager.setMicrophoneMute(Z)
android.media.AudioManager.setMode(I)
android.media.AudioManager.setParameter(java.lang.String,java.lang.String)
android.media.AudioManager.setParameters(java.lang.String)
android.media.AudioManager.setSpeakerphoneOn(Z)
android.media.AudioManager.startBluetoothSco()
android.media.AudioManager.stopBluetoothSco()
android.media.AudioRecord.<init>(I,I,int,I,I)
android.media.AudioService.setBluetoothScoOn(Z)
android.media.AudioService.setMode(I,android.os.IBinder)
android.media.AudioService.setSpeakerphoneOn(Z)
android.media.AudioService.startBluetoothSco(android.os.IBinder)
android.media.AudioService.stopBluetoothSco(android.os.IBinder)
android.media.IAudioService$Stub$Proxy.setBluetoothScoOn(Z)
android.media.IAudioService$Stub$Proxy.setMode(I,android.os.IBinder)
android.media.IAudioService$Stub$Proxy.setSpeakerphoneOn(Z)
android.media.IAudioService$Stub$Proxy.startBluetoothSco(android.os.IBinder)
android.media.IAudioService$Stub$Proxy.stopBluetoothSco(android.os.IBinder)
android.media.MediaPlayer.start()
android.media.MediaPlayer.stayAwake(Z)
android.media.MediaPlayer.stop()
android.media.MediaRecorder.setAudioSource(I)
android.media.MediaRecorder.setVideoSource(I)
android.media.RingtoneManager.setActualDefaultRingtoneUri(android.content.Context,I,android.net.Uri)
android.net.ConnectivityManager.getActiveNetworkInfo()
android.net.ConnectivityManager.getAllNetworkInfo()
android.net.ConnectivityManager.getLastTetherError(java.lang.String)
android.net.ConnectivityManager.getMobileDataEnabled()
android.net.ConnectivityManager.getNetworkInfo(I)
android.net.ConnectivityManager.getNetworkPreference()
android.net.ConnectivityManager.getTetherableIfaces()
android.net.ConnectivityManager.getTetherableUsbRegexs()
android.net.ConnectivityManager.getTetherableWifiRegexs()
android.net.ConnectivityManager.getTetheredIfaces()
android.net.ConnectivityManager.getTetheringErroredIfaces()
android.net.ConnectivityManager.isTetheringSupported()
android.net.ConnectivityManager.requestRouteToHost(I,I)
android.net.ConnectivityManager.setBackgroundDataSetting(Z)
android.net.ConnectivityManager.setMobileDataEnabled(Z)
android.net.ConnectivityManager.setNetworkPreference(I)
android.net.ConnectivityManager.setRadio(I,Z)
android.net.ConnectivityManager.setRadios(Z)
android.net.ConnectivityManager.startUsingNetworkFeature(I,java.lang.String)
android.net.ConnectivityManager.stopUsingNetworkFeature(I,java.lang.String)
android.net.ConnectivityManager.tether(java.lang.String)
android.net.ConnectivityManager.untether(java.lang.String)
android.net.Downloads$ById.deleteDownload(android.content.Context,J)
android.net.Downloads$ById.getMimeTypeForId(android.content.Context,J)
android.net.Downloads$ById.getStatus(android.content.Context,J)
android.net.Downloads$ById.openDownload(android.content.Context,J,java.lang.String)
android.net.Downloads$ById.openDownloadStream(android.content.Context,J)
android.net.Downloads$ById.startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,Z,I,Z,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
android.net.Downloads$ByUri.getCurrentOtaDownloads(android.content.Context,java.lang.String)
android.net.Downloads$ByUri.getProgressCursor(android.content.Context,J)
android.net.Downloads$ByUri.getStatus(android.content.Context,java.lang.String,J)
android.net.Downloads$ByUri.removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)
android.net.Downloads$ByUri.startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,Z,I,Z,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
android.net.Downloads$DownloadBase.startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,Z,I,Z,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
android.net.http.RequestQueue.enablePlatformNotifications()
android.net.http.RequestQueue.setProxyConfig()
android.net.IConnectivityManager$Stub$Proxy.getActiveNetworkInfo()
android.net.IConnectivityManager$Stub$Proxy.getAllNetworkInfo()
android.net.IConnectivityManager$Stub$Proxy.getLastTetherError(java.lang.String)
android.net.IConnectivityManager$Stub$Proxy.getMobileDataEnabled()
android.net.IConnectivityManager$Stub$Proxy.getNetworkInfo(I)
android.net.IConnectivityManager$Stub$Proxy.getNetworkPreference()
android.net.IConnectivityManager$Stub$Proxy.getTetherableIfaces()
android.net.IConnectivityManager$Stub$Proxy.getTetherableUsbRegexs()
android.net.IConnectivityManager$Stub$Proxy.getTetherableWifiRegexs()
android.net.IConnectivityManager$Stub$Proxy.getTetheredIfaces()
android.net.IConnectivityManager$Stub$Proxy.getTetheringErroredIfaces()
android.net.IConnectivityManager$Stub$Proxy.isTetheringSupported()
android.net.IConnectivityManager$Stub$Proxy.requestRouteToHost(I,I)
android.net.IConnectivityManager$Stub$Proxy.setBackgroundDataSetting(Z)
android.net.IConnectivityManager$Stub$Proxy.setMobileDataEnabled(Z)
android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(I)
android.net.IConnectivityManager$Stub$Proxy.setRadio(I,Z)
android.net.IConnectivityManager$Stub$Proxy.setRadios(Z)
android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(I,java.lang.String,android.os.IBinder)
android.net.IConnectivityManager$Stub$Proxy.stopUsingNetworkFeature(I,java.lang.String)
android.net.IConnectivityManager$Stub$Proxy.tether(java.lang.String)
android.net.IConnectivityManager$Stub$Proxy.untether(java.lang.String)
android.net.IThrottleManager$Stub$Proxy.getByteCount(java.lang.String,I,int,I)
android.net.IThrottleManager$Stub$Proxy.getCliffLevel(java.lang.String,I)
android.net.IThrottleManager$Stub$Proxy.getCliffThreshold(java.lang.String,I)
android.net.IThrottleManager$Stub$Proxy.getHelpUri()
android.net.IThrottleManager$Stub$Proxy.getPeriodStartTime(java.lang.String)
android.net.IThrottleManager$Stub$Proxy.getResetTime(java.lang.String)
android.net.IThrottleManager$Stub$Proxy.getThrottle(java.lang.String)
android.net.MobileDataStateTracker.reconnect()
android.net.MobileDataStateTracker.setRadio(Z)
android.net.MobileDataStateTracker.teardown()
android.net.NetworkInfo.isConnectedOrConnecting()
android.net.ThrottleManager.getByteCount(java.lang.String,I,int,I)
android.net.ThrottleManager.getCliffLevel(java.lang.String,I)
android.net.ThrottleManager.getCliffThreshold(java.lang.String,I)
android.net.ThrottleManager.getHelpUri()
android.net.ThrottleManager.getPeriodStartTime(java.lang.String)
android.net.ThrottleManager.getResetTime(java.lang.String)
android.net.wifi.IWifiManager$Stub$Proxy.acquireMulticastLock(android.os.IBinder,java.lang.String)
android.net.wifi.IWifiManager$Stub$Proxy.acquireWifiLock(android.os.IBinder,I,java.lang.String)
android.net.wifi.IWifiManager$Stub$Proxy.addOrUpdateNetwork(android.net.wifi.WifiConfiguration)
android.net.wifi.IWifiManager$Stub$Proxy.disableNetwork(I)
android.net.wifi.IWifiManager$Stub$Proxy.disconnect()
android.net.wifi.IWifiManager$Stub$Proxy.enableNetwork(I,Z)
android.net.wifi.IWifiManager$Stub$Proxy.getConfiguredNetworks()
android.net.wifi.IWifiManager$Stub$Proxy.getConnectionInfo()
android.net.wifi.IWifiManager$Stub$Proxy.getDhcpInfo()
android.net.wifi.IWifiManager$Stub$Proxy.getNumAllowedChannels()
android.net.wifi.IWifiManager$Stub$Proxy.getScanResults()
android.net.wifi.IWifiManager$Stub$Proxy.getValidChannelCounts()
android.net.wifi.IWifiManager$Stub$Proxy.getWifiApEnabledState()
android.net.wifi.IWifiManager$Stub$Proxy.getWifiEnabledState()
android.net.wifi.IWifiManager$Stub$Proxy.initializeMulticastFiltering()
android.net.wifi.IWifiManager$Stub$Proxy.isMulticastEnabled()
android.net.wifi.IWifiManager$Stub$Proxy.pingSupplicant()
android.net.wifi.IWifiManager$Stub$Proxy.reassociate()
android.net.wifi.IWifiManager$Stub$Proxy.reconnect()
android.net.wifi.IWifiManager$Stub$Proxy.releaseMulticastLock()
android.net.wifi.IWifiManager$Stub$Proxy.releaseWifiLock(android.os.IBinder)
android.net.wifi.IWifiManager$Stub$Proxy.removeNetwork(I)
android.net.wifi.IWifiManager$Stub$Proxy.saveConfiguration()
android.net.wifi.IWifiManager$Stub$Proxy.setNumAllowedChannels(I,Z)
android.net.wifi.IWifiManager$Stub$Proxy.setWifiApEnabled(android.net.wifi.WifiConfiguration,Z)
android.net.wifi.IWifiManager$Stub$Proxy.setWifiEnabled(Z)
android.net.wifi.IWifiManager$Stub$Proxy.startScan(Z)
android.net.wifi.WifiManager.addNetwork(android.net.wifi.WifiConfiguration)
android.net.wifi.WifiManager.addOrUpdateNetwork(android.net.wifi.WifiConfiguration)
android.net.wifi.WifiManager.disableNetwork(I)
android.net.wifi.WifiManager.disconnect()
android.net.wifi.WifiManager.enableNetwork(I,Z)
android.net.wifi.WifiManager.getConfiguredNetworks()
android.net.wifi.WifiManager.getConnectionInfo()
android.net.wifi.WifiManager.getDhcpInfo()
android.net.wifi.WifiManager.getNumAllowedChannels()
android.net.wifi.WifiManager.getScanResults()
android.net.wifi.WifiManager.getValidChannelCounts()
android.net.wifi.WifiManager.getWifiApState()
android.net.wifi.WifiManager.getWifiState()
android.net.wifi.WifiManager.initializeMulticastFiltering()
android.net.wifi.WifiManager.isMulticastEnabled()
android.net.wifi.WifiManager.isWifiApEnabled()
android.net.wifi.WifiManager.isWifiEnabled()
android.net.wifi.WifiManager.pingSupplicant()
android.net.wifi.WifiManager.reassociate()
android.net.wifi.WifiManager.reconnect()
android.net.wifi.WifiManager.removeNetwork(I)
android.net.wifi.WifiManager.saveConfiguration()
android.net.wifi.WifiManager.setNumAllowedChannels(I,Z)
android.net.wifi.WifiManager.setWifiApEnabled(android.net.wifi.WifiConfiguration,Z)
android.net.wifi.WifiManager.setWifiEnabled(Z)
android.net.wifi.WifiManager.startScan()
android.net.wifi.WifiManager.startScanActive()
android.net.wifi.WifiManager$MulticastLock.acquire()
android.net.wifi.WifiManager$MulticastLock.finalize()
android.net.wifi.WifiManager$MulticastLock.release()
android.net.wifi.WifiManager$WifiLock.acquire()
android.net.wifi.WifiManager$WifiLock.finalize()
android.net.wifi.WifiManager$WifiLock.release()
android.os.DropBoxManager.getNextEntry(java.lang.String,J)
android.os.IHardwareService$Stub$Proxy.setFlashlightEnabled(Z)
android.os.IMountService$Stub$Proxy.formatMedia
android.os.IMountService$Stub$Proxy.mountMedia
android.os.IMountService$Stub$Proxy.setAutoStartUms
android.os.IMountService$Stub$Proxy.setPlayNotificationSounds
android.os.IMountService$Stub$Proxy.shutdown
android.os.IMountService$Stub$Proxy.unmountMedia
android.os.INetworkManagementService$Stub$Proxy.attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.detachPppd(java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.disableNat(java.lang.String,java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.enableNat(java.lang.String,java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.getDnsForwarders()
android.os.INetworkManagementService$Stub$Proxy.getInterfaceRxCounter(java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.getInterfaceRxThrottle(java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.getInterfaceTxCounter(java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.getInterfaceTxThrottle(java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.getIpForwardingEnabled()
android.os.INetworkManagementService$Stub$Proxy.isTetheringStarted()
android.os.INetworkManagementService$Stub$Proxy.isUsbRNDISStarted()
android.os.INetworkManagementService$Stub$Proxy.listInterfaces()
android.os.INetworkManagementService$Stub$Proxy.listTetheredInterfaces()
android.os.INetworkManagementService$Stub$Proxy.listTtys()
android.os.INetworkManagementService$Stub$Proxy.setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.setInterfaceThrottle(java.lang.String,I,I)
android.os.INetworkManagementService$Stub$Proxy.setIpForwardingEnabled(Z)
android.os.INetworkManagementService$Stub$Proxy.shutdown()
android.os.INetworkManagementService$Stub$Proxy.startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.startUsbRNDIS()
android.os.INetworkManagementService$Stub$Proxy.stopAccessPoint()
android.os.INetworkManagementService$Stub$Proxy.stopTethering()
android.os.INetworkManagementService$Stub$Proxy.stopUsbRNDIS()
android.os.INetworkManagementService$Stub$Proxy.tetherInterface(java.lang.String)
android.os.INetworkManagementService$Stub$Proxy.unregisterObserver(android.net.INetworkManagementEventObserver)
android.os.INetworkManagementService$Stub$Proxy.untetherInterface(java.lang.String)
android.os.IPowerManager$Stub$Proxy.acquireWakeLock(I,android.os.IBinder,java.lang.String)
android.os.IPowerManager$Stub$Proxy.clearUserActivityTimeout(J,J)
android.os.IPowerManager$Stub$Proxy.crash(java.lang.String)
android.os.IPowerManager$Stub$Proxy.goToSleep(J)
android.os.IPowerManager$Stub$Proxy.goToSleepWithReason(J,I)
android.os.IPowerManager$Stub$Proxy.preventScreenOn(Z)
android.os.IPowerManager$Stub$Proxy.reboot(java.lang.String)
android.os.IPowerManager$Stub$Proxy.releaseWakeLock(android.os.IBinder,I)
android.os.IPowerManager$Stub$Proxy.setAttentionLight(Z,I)
android.os.IPowerManager$Stub$Proxy.setBacklightBrightness(I)
android.os.IPowerManager$Stub$Proxy.setMaximumScreenOffTimeount(I)
android.os.IPowerManager$Stub$Proxy.setPokeLock(I,android.os.IBinder,java.lang.String)
android.os.IPowerManager$Stub$Proxy.setStayOnSetting(I)
android.os.IPowerManager$Stub$Proxy.userActivityWithForce(J,Z,Z)
android.os.IVibratorService$Stub$Proxy.cancelVibrate(android.os.IBinder)
android.os.IVibratorService$Stub$Proxy.vibrate(J,android.os.IBinder)
android.os.IVibratorService$Stub$Proxy.vibratePattern([J,I,android.os.IBinder)
android.os.PowerManager.goToSleep(J)
android.os.PowerManager.reboot(java.lang.String)
android.os.PowerManager.setBacklightBrightness(I)
android.os.PowerManager$WakeLock.acquire()
android.os.PowerManager$WakeLock.acquire(J)
android.os.PowerManager$WakeLock.release()
android.os.PowerManager$WakeLock.release(I)
android.os.RecoverySystem.bootCommand(android.content.Context,java.lang.String)
android.os.RecoverySystem.installPackage(android.content.Context,java.io.File)
android.os.RecoverySystem.rebootWipeUserData(android.content.Context)
android.os.storage.IMountService$Stub$Proxy.createSecureContainer(java.lang.String,I,java.lang.String,java.lang.String,I)
android.os.storage.IMountService$Stub$Proxy.destroySecureContainer(java.lang.String,Z)
android.os.storage.IMountService$Stub$Proxy.finalizeSecureContainer(java.lang.String)
android.os.storage.IMountService$Stub$Proxy.formatVolume(java.lang.String)
android.os.storage.IMountService$Stub$Proxy.getSecureContainerList()
android.os.storage.IMountService$Stub$Proxy.getSecureContainerPath(java.lang.String)
android.os.storage.IMountService$Stub$Proxy.getStorageUsers(java.lang.String)
android.os.storage.IMountService$Stub$Proxy.isSecureContainerMounted(java.lang.String)
android.os.storage.IMountService$Stub$Proxy.mountSecureContainer(java.lang.String,java.lang.String,I)
android.os.storage.IMountService$Stub$Proxy.mountVolume(java.lang.String)
android.os.storage.IMountService$Stub$Proxy.renameSecureContainer(java.lang.String,java.lang.String)
android.os.storage.IMountService$Stub$Proxy.setUsbMassStorageEnabled(Z)
android.os.storage.IMountService$Stub$Proxy.shutdown(android.os.storage.IMountShutdownObserver)
android.os.storage.IMountService$Stub$Proxy.unmountSecureContainer(java.lang.String,Z)
android.os.storage.IMountService$Stub$Proxy.unmountVolume(java.lang.String,Z)
android.os.storage.StorageManager.disableUsbMassStorage()
android.os.storage.StorageManager.enableUsbMassStorage()
android.os.Vibrator.cancel()
android.os.Vibrator.vibrate([J,I)
android.os.Vibrator.vibrate(J)
android.pim.vcard.VCardComposer.createOneEntry()
android.pim.vcard.VCardComposer.createOneEntry(java.lang.reflect.Method)
android.pim.vcard.VCardComposer.createOneEntryInternal(java.lang.String,java.lang.reflect.Method)
android.pim.vcard.VCardComposer.init()
android.pim.vcard.VCardComposer.init(java.lang.String,[java.lang.String)
android.pim.vcard.VCardComposer$HandlerForOutputStream.onInit(android.content.Context)
android.pim.vcard.VCardComposer$OneEntryHandler.onInit(android.content.Context)
android.pim.vcard.VCardEntry.pushIntoContentResolver(android.content.ContentResolver)
android.pim.vcard.VCardEntryCommitter.onEntryCreated(android.pim.vcard.VCardEntry)
android.pim.vcard.VCardEntryHandler.onEntryCreated(android.pim.vcard.VCardEntry)
android.provider.Browser.addSearchUrl(android.content.ContentResolver,java.lang.String)
android.provider.Browser.canClearHistory(android.content.ContentResolver)
android.provider.Browser.clearHistory(android.content.ContentResolver)
android.provider.Browser.clearSearches(android.content.ContentResolver)
android.provider.Browser.deleteFromHistory(android.content.ContentResolver,java.lang.String)
android.provider.Browser.deleteHistoryTimeFrame(android.content.ContentResolver,J,J)
android.provider.Browser.deleteHistoryWhere(android.content.ContentResolver,java.lang.String)
android.provider.Browser.getAllBookmarks(android.content.ContentResolver)
android.provider.Browser.getAllVisitedUrls(android.content.ContentResolver)
android.provider.Browser.getVisitedHistory(android.content.ContentResolver)
android.provider.Browser.getVisitedLike(android.content.ContentResolver,java.lang.String)
android.provider.Browser.requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)
android.provider.Browser.truncateHistory(android.content.ContentResolver)
android.provider.Browser.updateVisitedHistory(android.content.ContentResolver,java.lang.String,Z)
android.provider.Calendar$CalendarAlerts.alarmExists(android.content.ContentResolver,J,long,J)
android.provider.Calendar$CalendarAlerts.findNextAlarmTime(android.content.ContentResolver,J)
android.provider.Calendar$CalendarAlerts.insert(android.content.ContentResolver,J,long,J,long,I)
android.provider.Calendar$CalendarAlerts.query(android.content.ContentResolver,[java.lang.String,java.lang.String,[java.lang.String,java.lang.String)
android.provider.Calendar$Calendars.delete(android.content.ContentResolver,java.lang.String,[java.lang.String)
android.provider.Calendar$Calendars.deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account)
android.provider.Calendar$Calendars.query(android.content.ContentResolver,[java.lang.String,java.lang.String,java.lang.String)
android.provider.Calendar$EventDays.query(android.content.ContentResolver,I,I)
android.provider.Calendar$Events.query(android.content.ContentResolver,[java.lang.String,java.lang.String,java.lang.String)
android.provider.Calendar$Events.query(android.content.ContentResolver,[java.lang.String)
android.provider.Calendar$Instances.query(android.content.ContentResolver,[java.lang.String,J,long,java.lang.String,java.lang.String)
android.provider.Calendar$Instances.query(android.content.ContentResolver,[java.lang.String,J,J)
android.provider.CallLog$Calls.addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,I,int,J,I)
android.provider.CallLog$Calls.getLastOutgoingCall(android.content.Context)
android.provider.CallLog$Calls.removeExpiredEntries(android.content.Context)
android.provider.Contacts$People.addToGroup(android.content.ContentResolver,J,java.lang.String)
android.provider.Contacts$People.addToGroup(android.content.ContentResolver,J,J)
android.provider.Contacts$People.addToMyContactsGroup(android.content.ContentResolver,J)
android.provider.Contacts$People.createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)
android.provider.Contacts$People.loadContactPhoto(android.content.Context,android.net.Uri,I,android.graphics.BitmapFactory$Options)
android.provider.Contacts$People.markAsContacted(android.content.ContentResolver,J)
android.provider.Contacts$People.openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)
android.provider.Contacts$People.queryGroups(android.content.ContentResolver,J)
android.provider.Contacts$People.setPhotoData(android.content.ContentResolver,android.net.Uri,[B)
android.provider.Contacts$People.tryGetMyContactsGroupId(android.content.ContentResolver)
android.provider.Contacts$Settings.getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)
android.provider.Contacts$Settings.setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)
android.provider.ContactsContract$Contacts.getLookupUri(android.content.ContentResolver,android.net.Uri)
android.provider.ContactsContract$Contacts.lookupContact(android.content.ContentResolver,android.net.Uri)
android.provider.ContactsContract$Contacts.markAsContacted(android.content.ContentResolver,J)
android.provider.ContactsContract$Contacts.openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)
android.provider.ContactsContract$Data.getContactLookupUri(android.content.ContentResolver,android.net.Uri)
android.provider.ContactsContract$RawContacts.getContactLookupUri(android.content.ContentResolver,android.net.Uri)
android.provider.DrmStore.enforceAccessDrmPermission(android.content.Context)
android.provider.Settings$Bookmarks.add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,C,I)
android.provider.Settings$Bookmarks.getIntentForShortcut(android.content.ContentResolver,C)
android.provider.Settings$Secure.putFloat(android.content.ContentResolver,java.lang.String,F)
android.provider.Settings$Secure.putInt(android.content.ContentResolver,java.lang.String,I)
android.provider.Settings$Secure.putLong(android.content.ContentResolver,java.lang.String,J)
android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String)
android.provider.Settings$Secure.setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,Z)
android.provider.Settings$System.putConfiguration(android.content.ContentResolver,android.content.res.Configuration)
android.provider.Settings$System.putFloat(android.content.ContentResolver,java.lang.String,F)
android.provider.Settings$System.putInt(android.content.ContentResolver,java.lang.String,I)
android.provider.Settings$System.putLong(android.content.ContentResolver,java.lang.String,J)
android.provider.Settings$System.putString(android.content.ContentResolver,java.lang.String,java.lang.String)
android.provider.Settings$System.setShowGTalkServiceStatus(android.content.ContentResolver,Z)
android.provider.Telephony$Mms.query(android.content.ContentResolver,[java.lang.String,java.lang.String,java.lang.String)
android.provider.Telephony$Mms.query(android.content.ContentResolver,[java.lang.String)
android.provider.Telephony$Sms.addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,Z,boolean,J)
android.provider.Telephony$Sms.addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,Z,Z)
android.provider.Telephony$Sms.moveMessageToFolder(android.content.Context,android.net.Uri,I,I)
android.provider.Telephony$Sms.query(android.content.ContentResolver,[java.lang.String,java.lang.String,java.lang.String)
android.provider.Telephony$Sms.query(android.content.ContentResolver,[java.lang.String)
android.provider.Telephony$Sms$Draft.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)
android.provider.Telephony$Sms$Draft.saveMessage(android.content.ContentResolver,android.net.Uri,java.lang.String)
android.provider.Telephony$Sms$Inbox.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,Z)
android.provider.Telephony$Sms$Outbox.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,Z,J)
android.provider.Telephony$Sms$Sent.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)
android.provider.Telephony$Threads.getOrCreateThreadId(android.content.Context,java.lang.String)
android.provider.Telephony$Threads.getOrCreateThreadId(android.content.Context,java.util.Set)
android.provider.UserDictionary$Words.addWord(android.content.Context,java.lang.String,I,I)
android.server.BluetoothA2dpService.<init>(android.content.Context,android.server.BluetoothService)
android.server.BluetoothA2dpService.addAudioSink(android.bluetooth.BluetoothDevice)
android.server.BluetoothA2dpService.checkSinkSuspendState(I)
android.server.BluetoothA2dpService.connectSink(android.bluetooth.BluetoothDevice)
android.server.BluetoothA2dpService.disconnectSink(android.bluetooth.BluetoothDevice)
android.server.BluetoothA2dpService.getConnectedSinks()
android.server.BluetoothA2dpService.getNonDisconnectedSinks()
android.server.BluetoothA2dpService.getSinkPriority(android.bluetooth.BluetoothDevice)
android.server.BluetoothA2dpService.getSinkState(android.bluetooth.BluetoothDevice)
android.server.BluetoothA2dpService.handleSinkStateChange(android.bluetooth.BluetoothDevice)
android.server.BluetoothA2dpService.isSinkDevice(android.bluetooth.BluetoothDevice)
android.server.BluetoothA2dpService.lookupSinksMatchingStates(int[])
android.server.BluetoothA2dpService.onBluetoothDisable()
android.server.BluetoothA2dpService.onBluetoothEnable()
android.server.BluetoothA2dpService.onConnectSinkResult(java.lang.String,Z)
android.server.BluetoothA2dpService.onSinkPropertyChanged(java.lang.String,[java.lang.String)
android.server.BluetoothA2dpService.resumeSink(android.bluetooth.BluetoothDevice)
android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,I)
android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,I)
android.server.BluetoothA2dpService.suspendSink(android.bluetooth.BluetoothDevice)
android.server.BluetoothService.addRemoteDeviceProperties(java.lang.String,[java.lang.String)
android.server.BluetoothService.addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,I,android.os.IBinder)
android.server.BluetoothService.cancelBondProcess(java.lang.String)
android.server.BluetoothService.cancelDiscovery()
android.server.BluetoothService.cancelPairingUserInput(java.lang.String)
android.server.BluetoothService.createBond(java.lang.String)
android.server.BluetoothService.disable()
android.server.BluetoothService.disable(Z)
android.server.BluetoothService.enable()
android.server.BluetoothService.enable(Z)
android.server.BluetoothService.fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)
android.server.BluetoothService.getAddress()
android.server.BluetoothService.getAddressFromObjectPath(java.lang.String)
android.server.BluetoothService.getAllProperties()
android.server.BluetoothService.getBluetoothState()
android.server.BluetoothService.getBondState(java.lang.String)
android.server.BluetoothService.getDiscoverableTimeout()
android.server.BluetoothService.getName()
android.server.BluetoothService.getObjectPathFromAddress(java.lang.String)
android.server.BluetoothService.getProperty(java.lang.String)
android.server.BluetoothService.getPropertyInternal(java.lang.String)
android.server.BluetoothService.getRemoteClass(java.lang.String)
android.server.BluetoothService.getRemoteName(java.lang.String)
android.server.BluetoothService.getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)
android.server.BluetoothService.getRemoteUuids(java.lang.String)
android.server.BluetoothService.getScanMode()
android.server.BluetoothService.getTrustState(java.lang.String)
android.server.BluetoothService.isDiscovering()
android.server.BluetoothService.isEnabled()
android.server.BluetoothService.listBonds()
android.server.BluetoothService.persistBluetoothOnSetting(Z)
android.server.BluetoothService.removeBond(java.lang.String)
android.server.BluetoothService.removeServiceRecord(I)
android.server.BluetoothService.sendUuidIntent(java.lang.String)
android.server.BluetoothService.setDiscoverableTimeout(I)
android.server.BluetoothService.setLinkTimeout(java.lang.String,I)
android.server.BluetoothService.setName(java.lang.String)
android.server.BluetoothService.setPairingConfirmation(java.lang.String,Z)
android.server.BluetoothService.setPasskey(java.lang.String,I)
android.server.BluetoothService.setPin(java.lang.String,[B)
android.server.BluetoothService.setPropertyBoolean(java.lang.String,Z)
android.server.BluetoothService.setPropertyInteger(java.lang.String,I)
android.server.BluetoothService.setPropertyString(java.lang.String,java.lang.String)
android.server.BluetoothService.setScanMode(I,I)
android.server.BluetoothService.setTrust(java.lang.String,Z)
android.server.BluetoothService.startDiscovery()
android.server.BluetoothService.updateDeviceServiceChannelCache(java.lang.String)
android.server.BluetoothService.updateRemoteDevicePropertiesCache(java.lang.String)
android.server.search.Searchables.buildSearchableList()
android.server.search.Searchables.findGlobalSearchActivity()
android.service.urlrenderer.UrlRendererService.clearWallpaper()
android.service.urlrenderer.UrlRendererService.removeStickyBroadcast(android.content.Intent)
android.service.urlrenderer.UrlRendererService.sendStickyBroadcast(android.content.Intent)
android.service.urlrenderer.UrlRendererService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.service.urlrenderer.UrlRendererService.setWallpaper(android.graphics.Bitmap)
android.service.urlrenderer.UrlRendererService.setWallpaper(java.io.InputStream)
android.service.wallpaper.WallpaperService.clearWallpaper()
android.service.wallpaper.WallpaperService.removeStickyBroadcast(android.content.Intent)
android.service.wallpaper.WallpaperService.sendStickyBroadcast(android.content.Intent)
android.service.wallpaper.WallpaperService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.service.wallpaper.WallpaperService.setWallpaper(android.graphics.Bitmap)
android.service.wallpaper.WallpaperService.setWallpaper(java.io.InputStream)
android.speech.RecognitionService.clearWallpaper()
android.speech.RecognitionService.removeStickyBroadcast(android.content.Intent)
android.speech.RecognitionService.sendStickyBroadcast(android.content.Intent)
android.speech.RecognitionService.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.speech.RecognitionService.setWallpaper(android.graphics.Bitmap)
android.speech.RecognitionService.setWallpaper(java.io.InputStream)
android.speech.SpeechRecognizer.cancel()
android.speech.SpeechRecognizer.handleCancelMessage()
android.speech.SpeechRecognizer.handleStartListening(android.content.Intent)
android.speech.SpeechRecognizer.handleStopMessage()
android.speech.SpeechRecognizer.startListening(android.content.Intent)
android.speech.SpeechRecognizer.stopListening()
android.telephony.gsm.SmsManager.copyMessageToSim([B,[B,I)
android.telephony.gsm.SmsManager.deleteMessageFromSim(I)
android.telephony.gsm.SmsManager.getAllMessagesFromSim()
android.telephony.gsm.SmsManager.sendDataMessage(java.lang.String,java.lang.String,S,[B,android.app.PendingIntent,android.app.PendingIntent)
android.telephony.gsm.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)
android.telephony.gsm.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)
android.telephony.gsm.SmsManager.updateMessageOnSim(I,I,[B)
android.telephony.PhoneNumberUtils.getNumberFromIntent(android.content.Intent,android.content.Context)
android.telephony.PhoneNumberUtils.isVoiceMailNumber(java.lang.String)
android.telephony.SmsManager.copyMessageToIcc([B,[B,I)
android.telephony.SmsManager.deleteMessageFromIcc(I)
android.telephony.SmsManager.getAllMessagesFromIcc()
android.telephony.SmsManager.sendDataMessage(java.lang.String,java.lang.String,S,[B,android.app.PendingIntent,android.app.PendingIntent)
android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)
android.telephony.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)
android.telephony.SmsManager.updateMessageOnIcc(I,I,[B)
android.telephony.TelephonyManager.disableLocationUpdates()
android.telephony.TelephonyManager.enableLocationUpdates()
android.telephony.TelephonyManager.getCellLocation()
android.telephony.TelephonyManager.getCompleteVoiceMailNumber()
android.telephony.TelephonyManager.getDeviceId()
android.telephony.TelephonyManager.getDeviceSoftwareVersion()
android.telephony.TelephonyManager.getLine1AlphaTag()
android.telephony.TelephonyManager.getLine1Number()
android.telephony.TelephonyManager.getNeighboringCellInfo()
android.telephony.TelephonyManager.getSimSerialNumber()
android.telephony.TelephonyManager.getSubscriberId()
android.telephony.TelephonyManager.getVoiceMailAlphaTag()
android.telephony.TelephonyManager.getVoiceMailNumber()
android.telephony.TelephonyManager.listen(android.telephony.PhoneStateListener,I)
android.view.ContextThemeWrapper.clearWallpaper()
android.view.ContextThemeWrapper.removeStickyBroadcast(android.content.Intent)
android.view.ContextThemeWrapper.sendStickyBroadcast(android.content.Intent)
android.view.ContextThemeWrapper.sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,I,java.lang.String,android.os.Bundle)
android.view.ContextThemeWrapper.setWallpaper(android.graphics.Bitmap)
android.view.ContextThemeWrapper.setWallpaper(java.io.InputStream)
android.view.IWindowManager$Stub$Proxy.addAppToken(I,android.view.IApplicationToken,I,int,Z)
android.view.IWindowManager$Stub$Proxy.addWindowToken(android.os.IBinder,I)
android.view.IWindowManager$Stub$Proxy.disableKeyguard(android.os.IBinder,java.lang.String)
android.view.IWindowManager$Stub$Proxy.executeAppTransition()
android.view.IWindowManager$Stub$Proxy.exitKeyguardSecurely(android.view.IOnKeyguardExitResult)
android.view.IWindowManager$Stub$Proxy.getDPadKeycodeState(I)
android.view.IWindowManager$Stub$Proxy.getDPadScancodeState(I)
android.view.IWindowManager$Stub$Proxy.getKeycodeState(I)
android.view.IWindowManager$Stub$Proxy.getKeycodeStateForDevice(I,I)
android.view.IWindowManager$Stub$Proxy.getScancodeState(I)
android.view.IWindowManager$Stub$Proxy.getScancodeStateForDevice(I,I)
android.view.IWindowManager$Stub$Proxy.getSwitchState(I)
android.view.IWindowManager$Stub$Proxy.getSwitchStateForDevice(I,I)
android.view.IWindowManager$Stub$Proxy.getTrackballKeycodeState(I)
android.view.IWindowManager$Stub$Proxy.getTrackballScancodeState(I)
android.view.IWindowManager$Stub$Proxy.injectKeyEvent(android.view.KeyEvent,Z)
android.view.IWindowManager$Stub$Proxy.injectPointerEvent(android.view.MotionEvent,Z)
android.view.IWindowManager$Stub$Proxy.injectTrackballEvent(android.view.MotionEvent,Z)
android.view.IWindowManager$Stub$Proxy.isViewServerRunning()
android.view.IWindowManager$Stub$Proxy.moveAppToken(I,android.os.IBinder)
android.view.IWindowManager$Stub$Proxy.moveAppTokensToBottom(java.util.List)
android.view.IWindowManager$Stub$Proxy.moveAppTokensToTop(java.util.List)
android.view.IWindowManager$Stub$Proxy.pauseKeyDispatching(android.os.IBinder)
android.view.IWindowManager$Stub$Proxy.prepareAppTransition(I)
android.view.IWindowManager$Stub$Proxy.reenableKeyguard(android.os.IBinder)
android.view.IWindowManager$Stub$Proxy.removeAppToken(android.os.IBinder)
android.view.IWindowManager$Stub$Proxy.removeWindowToken(android.os.IBinder)
android.view.IWindowManager$Stub$Proxy.resumeKeyDispatching(android.os.IBinder)
android.view.IWindowManager$Stub$Proxy.setAnimationScale(I,F)
android.view.IWindowManager$Stub$Proxy.setAnimationScales([F)
android.view.IWindowManager$Stub$Proxy.setAppGroupId(android.os.IBinder,I)
android.view.IWindowManager$Stub$Proxy.setAppOrientation(android.view.IApplicationToken,I)
android.view.IWindowManager$Stub$Proxy.setAppStartingWindow(android.os.IBinder,java.lang.String,I,java.lang.CharSequence,I,int,android.os.IBinder,Z)
android.view.IWindowManager$Stub$Proxy.setAppVisibility(android.os.IBinder,Z)
android.view.IWindowManager$Stub$Proxy.setAppWillBeHidden(android.os.IBinder)
android.view.IWindowManager$Stub$Proxy.setEventDispatching(Z)
android.view.IWindowManager$Stub$Proxy.setFocusedApp(android.os.IBinder,Z)
android.view.IWindowManager$Stub$Proxy.setNewConfiguration(android.content.res.Configuration)
android.view.IWindowManager$Stub$Proxy.setRotation(I,Z,I)
android.view.IWindowManager$Stub$Proxy.startAppFreezingScreen(android.os.IBinder,I)
android.view.IWindowManager$Stub$Proxy.startViewServer(I)
android.view.IWindowManager$Stub$Proxy.stopAppFreezingScreen(android.os.IBinder,Z)
android.view.IWindowManager$Stub$Proxy.stopViewServer()
android.view.IWindowManager$Stub$Proxy.updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)
android.view.IWindowSession$Stub$Proxy.add(android.view.IWindow,android.view.WindowManager$LayoutParams,I,android.graphics.Rect)
android.view.Surface.closeTransaction()
android.view.Surface.freezeDisplay(I)
android.view.Surface.setOrientation(I,I,I)
android.view.Surface.setOrientation(I,I)
android.view.Surface.unfreezeDisplay(I)
android.view.SurfaceSession.<init>()
android.webkit.GeolocationPermissions$Callback.invoke
android.webkit.GeolocationService.registerForLocationUpdates()
android.webkit.GeolocationService.setEnableGps(Z)
android.webkit.GeolocationService.start()
android.webkit.WebChromeClient.onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions.Callback)
android.webkit.WebIconDatabase.bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)
android.webkit.WebSettings.setBlockNetworkLoads(Z)
android.webkit.WebSettings.verifyNetworkAccess()
android.webkit.WebView.<init>(android.content.Context,android.util.AttributeSet,I)
android.webkit.WebView.<init>(android.content.Context,android.util.AttributeSet)
android.webkit.WebView.<init>(android.content.Context)
android.webkit.WebViewCore.<init>(android.content.Context,android.webkit.WebView,android.webkit.CallbackProxy,java.util.Map)
android.widget.QuickContactBadge.assignContactFromEmail(java.lang.String,Z)
android.widget.QuickContactBadge.assignContactFromPhone(java.lang.String,Z)
android.widget.QuickContactBadge.trigger(android.net.Uri)
com.android.http.multipart.FilePart.sendData(java.io.OutputStream)
com.android.http.multipart.FilePart.sendDispositionHeader(java.io.OutputStream)
com.android.http.multipart.Part.send(java.io.OutputStream)
com.android.http.multipart.Part.sendParts(java.io.OutputStream,com.android.http.multipart.Part[])
com.android.http.multipart.Part.sendParts(java.io.OutputStream,com.android.http.multipart.Part[],byte[])
com.android.http.multipart.Part.sendStart(java.io.OutputStream)
com.android.http.multipart.Part.sendTransferEncodingHeader(java.io.OutputStream)
com.android.http.multipart.StringPart.sendData(java.io.OuputStream)
com.android.internal.app.IBatteryStats$Stub$Proxy.getAwakeTimeBattery()
com.android.internal.app.IBatteryStats$Stub$Proxy.getAwakeTimePlugged()
com.android.internal.app.IBatteryStats$Stub$Proxy.getStatistics()
com.android.internal.app.IBatteryStats$Stub$Proxy.noteFullWifiLockAcquired(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteFullWifiLockReleased(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteInputEvent()
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneDataConnectionState(I,Z)
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneOff()
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneOn()
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneSignalStrength(SignalStrength)
com.android.internal.app.IBatteryStats$Stub$Proxy.notePhoneState(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScanWifiLockAcquired(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScanWifiLockReleased(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScreenBrightness(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScreenOff()
com.android.internal.app.IBatteryStats$Stub$Proxy.noteScreenOn()
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStartGps(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStartSensor(I,I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStartWakelock(I,java.lang.String,I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStopGps(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStopSensor(I,I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteStopWakelock(I,java.lang.String,I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteUserActivity(I,I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiMulticastDisabled(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiMulticastEnabled(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiOff(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiOn(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiRunning()
com.android.internal.app.IBatteryStats$Stub$Proxy.noteWifiStopped()
com.android.internal.app.IBatteryStats$Stub$Proxy.recordCurrentLevel(I)
com.android.internal.app.IBatteryStats$Stub$Proxy.setOnBattery(Z,I)
com.android.internal.app.IUsageStats$Stub$Proxy.getAllPkgUsageStats()
com.android.internal.app.IUsageStats$Stub$Proxy.getPkgUsageStats(ComponentName)
com.android.internal.app.IUsageStats$Stub$Proxy.noteLaunchTime(ComponentName,
com.android.internal.app.IUsageStats$Stub$Proxy.notePauseComponent(ComponentName)
com.android.internal.app.IUsageStats$Stub$Proxy.noteResumeComponent(ComponentName)
com.android.internal.appwidget.IAppWidgetService$Stub$Proxy.bindAppWidgetId(I,ComponentName)
com.android.internal.os.IDropBoxManagerService$Stub$Proxy.getNextEntry(java.lang.String,J)
com.android.internal.telephony.CallerInfo.getCallerId(android.content.Context,java.lang.String)
com.android.internal.telephony.CallerInfo.getCallerInfo(android.content.Context,java.lang.String)
com.android.internal.telephony.CallerInfo.markAsVoiceMail()
com.android.internal.telephony.IccPhoneBookInterfaceManager$Stub$Proxy.getAdnRecordsInEf(I)
com.android.internal.telephony.IccPhoneBookInterfaceManager$Stub$Proxy.updateAdnRecordsInEfByIndex(I,java.lang.String,java.lang.String,java.lang.String)
com.android.internal.telephony.IccPhoneBookInterfaceManager$Stub$Proxy.updateAdnRecordsInEfBySearch(I,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.getAdnRecordsInEf(I)
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfByIndex(I,java.lang.String,java.lang.String,java.lang.String)
com.android.internal.telephony.IIccPhoneBook$Stub$Proxy.updateAdnRecordsInEfBySearch(I,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getDeviceId()
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getDeviceSvn()
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getIccSerialNumber()
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getLine1AlphaTag()
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getLine1Number()
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getSubscriberId()
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getVoiceMailAlphaTag()
com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy.getVoiceMailNumber()
com.android.internal.telephony.ISms$Stub$Proxy.copyMessageToIccEf(I,byte[],byte[])
com.android.internal.telephony.ISms$Stub$Proxy.getAllMessagesFromIccEf()
com.android.internal.telephony.ISms$Stub$Proxy.sendData(java.lang.String,java.lang.String,I,byte[],android.app.PendingIntent,android.app.PendingIntent)
com.android.internal.telephony.ISms$Stub$Proxy.sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)
com.android.internal.telephony.ISms$Stub$Proxy.sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)
com.android.internal.telephony.ISms$Stub$Proxy.updateMessageOnIccEf(I,I,byte[])
com.android.internal.telephony.ITelephony$Stub$Proxy.answerRingingCall()
com.android.internal.telephony.ITelephony$Stub$Proxy.call(java.lang.String)
com.android.internal.telephony.ITelephony$Stub$Proxy.cancelMissedCallsNotification()
com.android.internal.telephony.ITelephony$Stub$Proxy.disableApnType(java.lang.String)
com.android.internal.telephony.ITelephony$Stub$Proxy.disableDataConnectivity()
com.android.internal.telephony.ITelephony$Stub$Proxy.disableLocationUpdates()
com.android.internal.telephony.ITelephony$Stub$Proxy.enableApnType(java.lang.String)
com.android.internal.telephony.ITelephony$Stub$Proxy.enableDataConnectivity()
com.android.internal.telephony.ITelephony$Stub$Proxy.enableLocationUpdates()
com.android.internal.telephony.ITelephony$Stub$Proxy.endCall()
com.android.internal.telephony.ITelephony$Stub$Proxy.getCellLocation()
com.android.internal.telephony.ITelephony$Stub$Proxy.getNeighboringCellInfo()
com.android.internal.telephony.ITelephony$Stub$Proxy.handlePinMmi(java.lang.String)
com.android.internal.telephony.ITelephony$Stub$Proxy.isSimPinEnabled()
com.android.internal.telephony.ITelephony$Stub$Proxy.setRadio(Z)
com.android.internal.telephony.ITelephony$Stub$Proxy.silenceRinger()
com.android.internal.telephony.ITelephony$Stub$Proxy.supplyPin(java.lang.String)
com.android.internal.telephony.ITelephony$Stub$Proxy.toggleRadioOnOff()
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,I,Z)
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyCallForwardingChanged(Z)
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyCallState(I,java.lang.String)
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyCellLocation(android.os.Bundle)
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataActivity(I)
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataConnection(I,Z,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,I)
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyDataConnectionFailed(java.lang.String)
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyMessageWaitingChanged(Z)
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifyServiceState(android.telephony.ServiceState)
com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy.notifySignalStrength(android.telephony.SignalStrength)
com.android.server.WallpaperManagerService.bindWallpaperComponentLocked(android.content.ComponentName)
com.android.server.WallpaperManagerService.dump(java.io.FileDescriptor,java.io.PrintWriter,[java.lang.String)
com.htc.net.wimax.WimaxController$Stub$Proxy.getConnectionInfo
com.htc.net.wimax.WimaxController$Stub$Proxy.getWimaxState
com.htc.net.wimax.WimaxController$Stub$Proxy.isBackoffState
com.htc.net.wimax.WimaxController$Stub$Proxy.isWimaxEnabled
com.htc.net.wimax.WimaxController$Stub$Proxy.setWimaxEnabled
java.lang.Runtime.exec(java.lang.String)
java.lang.Runtime.exec(java.lang.String[])
java.lang.Runtime.exec(java.lang.String[],java.lang.String[])
java.lang.Runtime.exec(java.lang.String[],java.lang.String[],java.io.File)
java.lang.Runtime.exec(java.lang.String,java.lang.String[])
java.lang.Runtime.exec(java.lang.String,java.lang.String[],java.io.File)
java.net.DatagramSocket.<init>()
java.net.DatagramSocket.<init>(I)
java.net.DatagramSocket.<init>(I,java.net.InetAddress)
java.net.DatagramSocket.<init>(java.net.SocketAddress)
java.net.HttpURLConnection.<init>(java.net.URL)
java.net.HttpURLConnection.connect()
java.net.MulticastSocket.<init>()
java.net.MulticastSocket.<init>(I)
java.net.MulticastSocket.<init>(java.net.SocketAddress)
java.net.NetworkInterface.<init>()
java.net.NetworkInterface.<init>(java.lang.String,I,java.net.InetAddress)
java.net.ServerSocket.<init>()
java.net.ServerSocket.<init>(I)
java.net.ServerSocket.<init>(I,I)
java.net.ServerSocket.<init>(I,I,java.net.InetAddress)
java.net.ServerSocket.bind(java.net.SocketAddress)
java.net.ServerSocket.bind(java.net.SocketAddress,I)
java.net.Socket.<init>()
java.net.Socket.<init>(java.lang.String,I)
java.net.Socket.<init>(java.lang.String,I,java.net.InetAddress,I)
java.net.Socket.<init>(java.lang.String,I,Z)
java.net.Socket.<init>(java.net.InetAddress,I)
java.net.Socket.<init>(java.net.InetAddress,I,java.net.InetAddress,I)
java.net.Socket.<init>(java.net.InetAddress,I,Z)
java.net.URL.getContent(java.lang.Class[])
java.net.URL.getContent()
java.net.URL.openConnection(java.net.Proxy)
java.net.URL.openConnection()
java.net.URL.openStream()
java.net.URLConnection.connect()
java.net.URLConnection.getInputStream()
org.apache.http.impl.client.DefaultHttpClient.<init>()
org.apache.http.impl.client.DefaultHttpClient.<init>(org.apache.http.params.HttpParams)
org.apache.http.impl.client.DefaultHttpClient.<init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest)
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest)
org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)
org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest)
org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)
org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)
org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)
org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)
org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)
org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest)
org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)
